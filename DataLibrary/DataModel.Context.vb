'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated from a template.
'
'     Manual changes to this file may cause unexpected behavior in your application.
'     Manual changes to this file will be overwritten if the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Entity
Imports System.Data.Entity.Infrastructure
Imports System.Data.Entity.Core.Objects
Imports System.Linq

Partial Public Class ModelEntities
    Inherits DbContext

    Public Sub New()
        MyBase.New("name=ModelEntities")
    End Sub

    Protected Overrides Sub OnModelCreating(modelBuilder As DbModelBuilder)
        Throw New UnintentionalCodeFirstException()
    End Sub

    Public Overridable Property Addresses() As DbSet(Of Address)
    Public Overridable Property AppSettings() As DbSet(Of AppSetting)
    Public Overridable Property Attachments() As DbSet(Of Attachment)
    Public Overridable Property AuditLogs() As DbSet(Of AuditLog)
    Public Overridable Property CMSCategories() As DbSet(Of CMSCategory)
    Public Overridable Property CMSMergeFields() As DbSet(Of CMSMergeField)
    Public Overridable Property Customers() As DbSet(Of Customer)
    Public Overridable Property ManagedTypeAssociations() As DbSet(Of ManagedTypeAssociation)
    Public Overridable Property ManagedTypeItems() As DbSet(Of ManagedTypeItem)
    Public Overridable Property ManagedTypes() As DbSet(Of ManagedType)
    Public Overridable Property MetaAuditLogAttributes() As DbSet(Of MetaAuditLogAttribute)
    Public Overridable Property MetaCountries() As DbSet(Of MetaCountry)
    Public Overridable Property MetaForms() As DbSet(Of MetaForm)
    Public Overridable Property MetaFunctions() As DbSet(Of MetaFunction)
    Public Overridable Property MetaMenus() As DbSet(Of MetaMenu)
    Public Overridable Property MetaModules() As DbSet(Of MetaModule)
    Public Overridable Property MetaObjects() As DbSet(Of MetaObject)
    Public Overridable Property MetaStates() As DbSet(Of MetaState)
    Public Overridable Property MetaTypeItems() As DbSet(Of MetaTypeItem)
    Public Overridable Property MetaTypes() As DbSet(Of MetaType)
    Public Overridable Property Notes() As DbSet(Of Note)
    Public Overridable Property UserFavorites() As DbSet(Of UserFavorite)
    Public Overridable Property UserJobTitles() As DbSet(Of UserJobTitle)
    Public Overridable Property UserLoginLogs() As DbSet(Of UserLoginLog)
    Public Overridable Property UserRoles() As DbSet(Of UserRole)
    Public Overridable Property UserSearchFilters() As DbSet(Of UserSearchFilter)
    Public Overridable Property EmailLogs() As DbSet(Of EmailLog)
    Public Overridable Property MetaToolTips() As DbSet(Of MetaToolTip)
    Public Overridable Property Pictures() As DbSet(Of Picture)
    Public Overridable Property Users() As DbSet(Of User)
    Public Overridable Property Documents() As DbSet(Of Document)
    Public Overridable Property CustomerContacts() As DbSet(Of CustomerContact)
    Public Overridable Property Categories() As DbSet(Of Category)
    Public Overridable Property Products() As DbSet(Of Product)
    Public Overridable Property ProductImages() As DbSet(Of ProductImage)
    Public Overridable Property CustomerAddresses() As DbSet(Of CustomerAddress)
    Public Overridable Property Orders() As DbSet(Of Order)
    Public Overridable Property OrderDetails() As DbSet(Of OrderDetail)
    Public Overridable Property ShoppingCarts() As DbSet(Of ShoppingCart)

    Public Overridable Function MetaMenu_GetList(userID As Nullable(Of Integer)) As ObjectResult(Of MetaMenu_GetList_Result)
        Dim userIDParameter As ObjectParameter = If(userID.HasValue, New ObjectParameter("UserID", userID), New ObjectParameter("UserID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of MetaMenu_GetList_Result)("MetaMenu_GetList", userIDParameter)
    End Function

    Public Overridable Function Users_UpdatePassword(userID As Nullable(Of Integer), password As String, modifiedBy As Nullable(Of Integer)) As Integer
        Dim userIDParameter As ObjectParameter = If(userID.HasValue, New ObjectParameter("UserID", userID), New ObjectParameter("UserID", GetType(Integer)))

        Dim passwordParameter As ObjectParameter = If(password IsNot Nothing, New ObjectParameter("Password", password), New ObjectParameter("Password", GetType(String)))

        Dim modifiedByParameter As ObjectParameter = If(modifiedBy.HasValue, New ObjectParameter("ModifiedBy", modifiedBy), New ObjectParameter("ModifiedBy", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("Users_UpdatePassword", userIDParameter, passwordParameter, modifiedByParameter)
    End Function

    Public Overridable Function Users_ValidateLogin(username As String, password As String, resetKey As Byte(), userID As Nullable(Of Integer)) As ObjectResult(Of Users_ValidateLogin_Result)
        Dim usernameParameter As ObjectParameter = If(username IsNot Nothing, New ObjectParameter("Username", username), New ObjectParameter("Username", GetType(String)))

        Dim passwordParameter As ObjectParameter = If(password IsNot Nothing, New ObjectParameter("Password", password), New ObjectParameter("Password", GetType(String)))

        Dim resetKeyParameter As ObjectParameter = If(resetKey IsNot Nothing, New ObjectParameter("ResetKey", resetKey), New ObjectParameter("ResetKey", GetType(Byte())))

        Dim userIDParameter As ObjectParameter = If(userID.HasValue, New ObjectParameter("UserID", userID), New ObjectParameter("UserID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Users_ValidateLogin_Result)("Users_ValidateLogin", usernameParameter, passwordParameter, resetKeyParameter, userIDParameter)
    End Function

    Public Overridable Function Users_GetList(userID As Nullable(Of Integer), archived As Nullable(Of Boolean), fullname As String, phone As String, email As String, jobTitleIDs As String, statusIDs As String) As ObjectResult(Of Users_GetList_Result)
        Dim userIDParameter As ObjectParameter = If(userID.HasValue, New ObjectParameter("UserID", userID), New ObjectParameter("UserID", GetType(Integer)))

        Dim archivedParameter As ObjectParameter = If(archived.HasValue, New ObjectParameter("Archived", archived), New ObjectParameter("Archived", GetType(Boolean)))

        Dim fullnameParameter As ObjectParameter = If(fullname IsNot Nothing, New ObjectParameter("Fullname", fullname), New ObjectParameter("Fullname", GetType(String)))

        Dim phoneParameter As ObjectParameter = If(phone IsNot Nothing, New ObjectParameter("Phone", phone), New ObjectParameter("Phone", GetType(String)))

        Dim emailParameter As ObjectParameter = If(email IsNot Nothing, New ObjectParameter("Email", email), New ObjectParameter("Email", GetType(String)))

        Dim jobTitleIDsParameter As ObjectParameter = If(jobTitleIDs IsNot Nothing, New ObjectParameter("JobTitleIDs", jobTitleIDs), New ObjectParameter("JobTitleIDs", GetType(String)))

        Dim statusIDsParameter As ObjectParameter = If(statusIDs IsNot Nothing, New ObjectParameter("StatusIDs", statusIDs), New ObjectParameter("StatusIDs", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Users_GetList_Result)("Users_GetList", userIDParameter, archivedParameter, fullnameParameter, phoneParameter, emailParameter, jobTitleIDsParameter, statusIDsParameter)
    End Function

    Public Overridable Function Users_GetComboBoxList(userID As Nullable(Of Integer), fullname As String, skip As Nullable(Of Integer), take As Nullable(Of Integer)) As ObjectResult(Of Users_GetComboBoxList_Result)
        Dim userIDParameter As ObjectParameter = If(userID.HasValue, New ObjectParameter("UserID", userID), New ObjectParameter("UserID", GetType(Integer)))

        Dim fullnameParameter As ObjectParameter = If(fullname IsNot Nothing, New ObjectParameter("Fullname", fullname), New ObjectParameter("Fullname", GetType(String)))

        Dim skipParameter As ObjectParameter = If(skip.HasValue, New ObjectParameter("Skip", skip), New ObjectParameter("Skip", GetType(Integer)))

        Dim takeParameter As ObjectParameter = If(take.HasValue, New ObjectParameter("Take", take), New ObjectParameter("Take", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Users_GetComboBoxList_Result)("Users_GetComboBoxList", userIDParameter, fullnameParameter, skipParameter, takeParameter)
    End Function

    Public Overridable Function UserFavorites_GetMenuList(userID As Nullable(Of Integer)) As ObjectResult(Of UserFavorites_GetMenuList_Result)
        Dim userIDParameter As ObjectParameter = If(userID.HasValue, New ObjectParameter("UserID", userID), New ObjectParameter("UserID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of UserFavorites_GetMenuList_Result)("UserFavorites_GetMenuList", userIDParameter)
    End Function

    Public Overridable Function CustomerContacts_GetList(customerID As Nullable(Of Integer), contactName As String, contactEmail As String, phone As String, archived As Nullable(Of Boolean)) As ObjectResult(Of CustomerContacts_GetList_Result)
        Dim customerIDParameter As ObjectParameter = If(customerID.HasValue, New ObjectParameter("CustomerID", customerID), New ObjectParameter("CustomerID", GetType(Integer)))

        Dim contactNameParameter As ObjectParameter = If(contactName IsNot Nothing, New ObjectParameter("ContactName", contactName), New ObjectParameter("ContactName", GetType(String)))

        Dim contactEmailParameter As ObjectParameter = If(contactEmail IsNot Nothing, New ObjectParameter("ContactEmail", contactEmail), New ObjectParameter("ContactEmail", GetType(String)))

        Dim phoneParameter As ObjectParameter = If(phone IsNot Nothing, New ObjectParameter("Phone", phone), New ObjectParameter("Phone", GetType(String)))

        Dim archivedParameter As ObjectParameter = If(archived.HasValue, New ObjectParameter("Archived", archived), New ObjectParameter("Archived", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of CustomerContacts_GetList_Result)("CustomerContacts_GetList", customerIDParameter, contactNameParameter, contactEmailParameter, phoneParameter, archivedParameter)
    End Function

    Public Overridable Function Notes_GetList(objectID As Nullable(Of Integer), keyID As Nullable(Of Integer), noteTypeID As String, title As String, createdBy As Nullable(Of Integer), dateFrom As Nullable(Of Date), dateTo As Nullable(Of Date), archived As Nullable(Of Boolean)) As ObjectResult(Of Notes_GetList_Result)
        Dim objectIDParameter As ObjectParameter = If(objectID.HasValue, New ObjectParameter("ObjectID", objectID), New ObjectParameter("ObjectID", GetType(Integer)))

        Dim keyIDParameter As ObjectParameter = If(keyID.HasValue, New ObjectParameter("KeyID", keyID), New ObjectParameter("KeyID", GetType(Integer)))

        Dim noteTypeIDParameter As ObjectParameter = If(noteTypeID IsNot Nothing, New ObjectParameter("NoteTypeID", noteTypeID), New ObjectParameter("NoteTypeID", GetType(String)))

        Dim titleParameter As ObjectParameter = If(title IsNot Nothing, New ObjectParameter("Title", title), New ObjectParameter("Title", GetType(String)))

        Dim createdByParameter As ObjectParameter = If(createdBy.HasValue, New ObjectParameter("CreatedBy", createdBy), New ObjectParameter("CreatedBy", GetType(Integer)))

        Dim dateFromParameter As ObjectParameter = If(dateFrom.HasValue, New ObjectParameter("DateFrom", dateFrom), New ObjectParameter("DateFrom", GetType(Date)))

        Dim dateToParameter As ObjectParameter = If(dateTo.HasValue, New ObjectParameter("DateTo", dateTo), New ObjectParameter("DateTo", GetType(Date)))

        Dim archivedParameter As ObjectParameter = If(archived.HasValue, New ObjectParameter("Archived", archived), New ObjectParameter("Archived", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Notes_GetList_Result)("Notes_GetList", objectIDParameter, keyIDParameter, noteTypeIDParameter, titleParameter, createdByParameter, dateFromParameter, dateToParameter, archivedParameter)
    End Function

    Public Overridable Function MetaFunctions_GetAllFunctionsWithModules(userRoleID As Nullable(Of Integer), functionName As String) As ObjectResult(Of MetaFunctions_GetAllFunctionsWithModules_Result)
        Dim userRoleIDParameter As ObjectParameter = If(userRoleID.HasValue, New ObjectParameter("UserRoleID", userRoleID), New ObjectParameter("UserRoleID", GetType(Integer)))

        Dim functionNameParameter As ObjectParameter = If(functionName IsNot Nothing, New ObjectParameter("FunctionName", functionName), New ObjectParameter("FunctionName", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of MetaFunctions_GetAllFunctionsWithModules_Result)("MetaFunctions_GetAllFunctionsWithModules", userRoleIDParameter, functionNameParameter)
    End Function

    Public Overridable Function UserRoles_GetByFunctionID(functionID As Nullable(Of Integer)) As ObjectResult(Of UserRoles_GetByFunctionID_Result)
        Dim functionIDParameter As ObjectParameter = If(functionID.HasValue, New ObjectParameter("FunctionID", functionID), New ObjectParameter("FunctionID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of UserRoles_GetByFunctionID_Result)("UserRoles_GetByFunctionID", functionIDParameter)
    End Function

    Public Overridable Function UserRoleHasPageAccess(formID As Nullable(Of Integer), userID As Nullable(Of Integer)) As Integer
        Dim formIDParameter As ObjectParameter = If(formID.HasValue, New ObjectParameter("FormID", formID), New ObjectParameter("FormID", GetType(Integer)))

        Dim userIDParameter As ObjectParameter = If(userID.HasValue, New ObjectParameter("UserID", userID), New ObjectParameter("UserID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("UserRoleHasPageAccess", formIDParameter, userIDParameter)
    End Function

    Public Overridable Function Users_GetFunctionAccess(userID As Nullable(Of Integer)) As ObjectResult(Of Users_GetFunctionAccess_Result)
        Dim userIDParameter As ObjectParameter = If(userID.HasValue, New ObjectParameter("UserID", userID), New ObjectParameter("UserID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Users_GetFunctionAccess_Result)("Users_GetFunctionAccess", userIDParameter)
    End Function

    Public Overridable Function MetaMenu_GetTreeList() As ObjectResult(Of MetaMenu_GetTreeList_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of MetaMenu_GetTreeList_Result)("MetaMenu_GetTreeList")
    End Function

    Public Overridable Function CMSCategories_GetListByMergeFields(categoryName As String, contentTypeIDs As String, mergeFieldIDs As String, archieved As Nullable(Of Boolean)) As ObjectResult(Of CMSCategories_GetListByMergeFields_Result)
        Dim categoryNameParameter As ObjectParameter = If(categoryName IsNot Nothing, New ObjectParameter("CategoryName", categoryName), New ObjectParameter("CategoryName", GetType(String)))

        Dim contentTypeIDsParameter As ObjectParameter = If(contentTypeIDs IsNot Nothing, New ObjectParameter("ContentTypeIDs", contentTypeIDs), New ObjectParameter("ContentTypeIDs", GetType(String)))

        Dim mergeFieldIDsParameter As ObjectParameter = If(mergeFieldIDs IsNot Nothing, New ObjectParameter("MergeFieldIDs", mergeFieldIDs), New ObjectParameter("MergeFieldIDs", GetType(String)))

        Dim archievedParameter As ObjectParameter = If(archieved.HasValue, New ObjectParameter("Archieved", archieved), New ObjectParameter("Archieved", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of CMSCategories_GetListByMergeFields_Result)("CMSCategories_GetListByMergeFields", categoryNameParameter, contentTypeIDsParameter, mergeFieldIDsParameter, archievedParameter)
    End Function

    Public Overridable Function Customers_GetList(pageIndex As Nullable(Of Integer), pageSize As Nullable(Of Integer), customerName As String, phone As String, statusIDs As String, contactName As String, contactEmail As String, archived As Nullable(Of Boolean), sortExpression As String, sortOrder As Nullable(Of Integer)) As ObjectResult(Of Customers_GetList_Result)
        Dim pageIndexParameter As ObjectParameter = If(pageIndex.HasValue, New ObjectParameter("PageIndex", pageIndex), New ObjectParameter("PageIndex", GetType(Integer)))

        Dim pageSizeParameter As ObjectParameter = If(pageSize.HasValue, New ObjectParameter("PageSize", pageSize), New ObjectParameter("PageSize", GetType(Integer)))

        Dim customerNameParameter As ObjectParameter = If(customerName IsNot Nothing, New ObjectParameter("CustomerName", customerName), New ObjectParameter("CustomerName", GetType(String)))

        Dim phoneParameter As ObjectParameter = If(phone IsNot Nothing, New ObjectParameter("Phone", phone), New ObjectParameter("Phone", GetType(String)))

        Dim statusIDsParameter As ObjectParameter = If(statusIDs IsNot Nothing, New ObjectParameter("StatusIDs", statusIDs), New ObjectParameter("StatusIDs", GetType(String)))

        Dim contactNameParameter As ObjectParameter = If(contactName IsNot Nothing, New ObjectParameter("ContactName", contactName), New ObjectParameter("ContactName", GetType(String)))

        Dim contactEmailParameter As ObjectParameter = If(contactEmail IsNot Nothing, New ObjectParameter("ContactEmail", contactEmail), New ObjectParameter("ContactEmail", GetType(String)))

        Dim archivedParameter As ObjectParameter = If(archived.HasValue, New ObjectParameter("Archived", archived), New ObjectParameter("Archived", GetType(Boolean)))

        Dim sortExpressionParameter As ObjectParameter = If(sortExpression IsNot Nothing, New ObjectParameter("SortExpression", sortExpression), New ObjectParameter("SortExpression", GetType(String)))

        Dim sortOrderParameter As ObjectParameter = If(sortOrder.HasValue, New ObjectParameter("SortOrder", sortOrder), New ObjectParameter("SortOrder", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Customers_GetList_Result)("Customers_GetList", pageIndexParameter, pageSizeParameter, customerNameParameter, phoneParameter, statusIDsParameter, contactNameParameter, contactEmailParameter, archivedParameter, sortExpressionParameter, sortOrderParameter)
    End Function

    Public Overridable Function Documents_GetByID(documentID As Nullable(Of Integer)) As ObjectResult(Of Documents_GetByID_Result)
        Dim documentIDParameter As ObjectParameter = If(documentID.HasValue, New ObjectParameter("DocumentID", documentID), New ObjectParameter("DocumentID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Documents_GetByID_Result)("Documents_GetByID", documentIDParameter)
    End Function

    Public Overridable Function Documents_GetList(objectID As Nullable(Of Integer), keyID As Nullable(Of Integer), documentName As String) As ObjectResult(Of Documents_GetList_Result)
        Dim objectIDParameter As ObjectParameter = If(objectID.HasValue, New ObjectParameter("ObjectID", objectID), New ObjectParameter("ObjectID", GetType(Integer)))

        Dim keyIDParameter As ObjectParameter = If(keyID.HasValue, New ObjectParameter("KeyID", keyID), New ObjectParameter("KeyID", GetType(Integer)))

        Dim documentNameParameter As ObjectParameter = If(documentName IsNot Nothing, New ObjectParameter("DocumentName", documentName), New ObjectParameter("DocumentName", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Documents_GetList_Result)("Documents_GetList", objectIDParameter, keyIDParameter, documentNameParameter)
    End Function

    Public Overridable Function Notes_GetListForDashBoard(objectID As Nullable(Of Integer), keyID As Nullable(Of Integer), numberOfItems As Nullable(Of Integer)) As ObjectResult(Of Notes_GetListForDashBoard_Result)
        Dim objectIDParameter As ObjectParameter = If(objectID.HasValue, New ObjectParameter("ObjectID", objectID), New ObjectParameter("ObjectID", GetType(Integer)))

        Dim keyIDParameter As ObjectParameter = If(keyID.HasValue, New ObjectParameter("KeyID", keyID), New ObjectParameter("KeyID", GetType(Integer)))

        Dim numberOfItemsParameter As ObjectParameter = If(numberOfItems.HasValue, New ObjectParameter("NumberOfItems", numberOfItems), New ObjectParameter("NumberOfItems", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Notes_GetListForDashBoard_Result)("Notes_GetListForDashBoard", objectIDParameter, keyIDParameter, numberOfItemsParameter)
    End Function

    Public Overridable Function Documents_GetListForDashBoard(objectID As Nullable(Of Integer), keyID As Nullable(Of Integer), numberOfItems As Nullable(Of Integer)) As ObjectResult(Of Documents_GetListForDashBoard_Result)
        Dim objectIDParameter As ObjectParameter = If(objectID.HasValue, New ObjectParameter("ObjectID", objectID), New ObjectParameter("ObjectID", GetType(Integer)))

        Dim keyIDParameter As ObjectParameter = If(keyID.HasValue, New ObjectParameter("KeyID", keyID), New ObjectParameter("KeyID", GetType(Integer)))

        Dim numberOfItemsParameter As ObjectParameter = If(numberOfItems.HasValue, New ObjectParameter("NumberOfItems", numberOfItems), New ObjectParameter("NumberOfItems", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Documents_GetListForDashBoard_Result)("Documents_GetListForDashBoard", objectIDParameter, keyIDParameter, numberOfItemsParameter)
    End Function

    Public Overridable Function AuditLog_GetListForDashBoard(objectID As Nullable(Of Integer), keyID As Nullable(Of Integer), numberOfItems As Nullable(Of Integer)) As ObjectResult(Of AuditLog_GetListForDashBoard_Result)
        Dim objectIDParameter As ObjectParameter = If(objectID.HasValue, New ObjectParameter("ObjectID", objectID), New ObjectParameter("ObjectID", GetType(Integer)))

        Dim keyIDParameter As ObjectParameter = If(keyID.HasValue, New ObjectParameter("KeyID", keyID), New ObjectParameter("KeyID", GetType(Integer)))

        Dim numberOfItemsParameter As ObjectParameter = If(numberOfItems.HasValue, New ObjectParameter("NumberOfItems", numberOfItems), New ObjectParameter("NumberOfItems", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of AuditLog_GetListForDashBoard_Result)("AuditLog_GetListForDashBoard", objectIDParameter, keyIDParameter, numberOfItemsParameter)
    End Function

    Public Overridable Function Users_GetDetailsByID(userID As Nullable(Of Integer)) As ObjectResult(Of Users_GetDetailsByID_Result)
        Dim userIDParameter As ObjectParameter = If(userID.HasValue, New ObjectParameter("UserID", userID), New ObjectParameter("UserID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Users_GetDetailsByID_Result)("Users_GetDetailsByID", userIDParameter)
    End Function

    Public Overridable Function CustomerContacts_GetDetailsByID(contactID As Nullable(Of Integer)) As ObjectResult(Of CustomerContacts_GetDetailsByID_Result)
        Dim contactIDParameter As ObjectParameter = If(contactID.HasValue, New ObjectParameter("ContactID", contactID), New ObjectParameter("ContactID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of CustomerContacts_GetDetailsByID_Result)("CustomerContacts_GetDetailsByID", contactIDParameter)
    End Function

    Public Overridable Function Customers_GetDetailsByID(customerID As Nullable(Of Integer)) As ObjectResult(Of Customers_GetDetailsByID_Result)
        Dim customerIDParameter As ObjectParameter = If(customerID.HasValue, New ObjectParameter("CustomerID", customerID), New ObjectParameter("CustomerID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Customers_GetDetailsByID_Result)("Customers_GetDetailsByID", customerIDParameter)
    End Function

    Public Overridable Function Users_HasFunctionAccess(userID As Nullable(Of Integer), functionID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Boolean))
        Dim userIDParameter As ObjectParameter = If(userID.HasValue, New ObjectParameter("UserID", userID), New ObjectParameter("UserID", GetType(Integer)))

        Dim functionIDParameter As ObjectParameter = If(functionID.HasValue, New ObjectParameter("FunctionID", functionID), New ObjectParameter("FunctionID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Boolean))("Users_HasFunctionAccess", userIDParameter, functionIDParameter)
    End Function

    Public Overridable Function Users_UpdateResetKey(userName As String) As ObjectResult(Of Users_UpdateResetKey_Result)
        Dim userNameParameter As ObjectParameter = If(userName IsNot Nothing, New ObjectParameter("UserName", userName), New ObjectParameter("UserName", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Users_UpdateResetKey_Result)("Users_UpdateResetKey", userNameParameter)
    End Function

    Public Overridable Function Category_GetList(pageIndex As Nullable(Of Integer), pageSize As Nullable(Of Integer), categoryName As String, description As String, categoryID As Nullable(Of Integer), parentID As Nullable(Of Integer), archived As Nullable(Of Boolean), dateCreatedFrom As String, dateCreatedTo As String, sortExpression As String, sortOrder As Nullable(Of Integer)) As ObjectResult(Of Category_GetList_Result)
        Dim pageIndexParameter As ObjectParameter = If(pageIndex.HasValue, New ObjectParameter("PageIndex", pageIndex), New ObjectParameter("PageIndex", GetType(Integer)))

        Dim pageSizeParameter As ObjectParameter = If(pageSize.HasValue, New ObjectParameter("PageSize", pageSize), New ObjectParameter("PageSize", GetType(Integer)))

        Dim categoryNameParameter As ObjectParameter = If(categoryName IsNot Nothing, New ObjectParameter("CategoryName", categoryName), New ObjectParameter("CategoryName", GetType(String)))

        Dim descriptionParameter As ObjectParameter = If(description IsNot Nothing, New ObjectParameter("Description", description), New ObjectParameter("Description", GetType(String)))

        Dim categoryIDParameter As ObjectParameter = If(categoryID.HasValue, New ObjectParameter("CategoryID", categoryID), New ObjectParameter("CategoryID", GetType(Integer)))

        Dim parentIDParameter As ObjectParameter = If(parentID.HasValue, New ObjectParameter("ParentID", parentID), New ObjectParameter("ParentID", GetType(Integer)))

        Dim archivedParameter As ObjectParameter = If(archived.HasValue, New ObjectParameter("Archived", archived), New ObjectParameter("Archived", GetType(Boolean)))

        Dim dateCreatedFromParameter As ObjectParameter = If(dateCreatedFrom IsNot Nothing, New ObjectParameter("DateCreatedFrom", dateCreatedFrom), New ObjectParameter("DateCreatedFrom", GetType(String)))

        Dim dateCreatedToParameter As ObjectParameter = If(dateCreatedTo IsNot Nothing, New ObjectParameter("DateCreatedTo", dateCreatedTo), New ObjectParameter("DateCreatedTo", GetType(String)))

        Dim sortExpressionParameter As ObjectParameter = If(sortExpression IsNot Nothing, New ObjectParameter("SortExpression", sortExpression), New ObjectParameter("SortExpression", GetType(String)))

        Dim sortOrderParameter As ObjectParameter = If(sortOrder.HasValue, New ObjectParameter("SortOrder", sortOrder), New ObjectParameter("SortOrder", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Category_GetList_Result)("Category_GetList", pageIndexParameter, pageSizeParameter, categoryNameParameter, descriptionParameter, categoryIDParameter, parentIDParameter, archivedParameter, dateCreatedFromParameter, dateCreatedToParameter, sortExpressionParameter, sortOrderParameter)
    End Function

    Public Overridable Function Category_ToggleArchive(categoryID As Nullable(Of Integer)) As Integer
        Dim categoryIDParameter As ObjectParameter = If(categoryID.HasValue, New ObjectParameter("CategoryID", categoryID), New ObjectParameter("CategoryID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("Category_ToggleArchive", categoryIDParameter)
    End Function

    Public Overridable Function Product_GetList(pageIndex As Nullable(Of Integer), pageSize As Nullable(Of Integer), productID As Nullable(Of Integer), productName As String, description As String, categoryID As Nullable(Of Integer), subCategoryID As Nullable(Of Integer), cost As Nullable(Of Double), price As Nullable(Of Double), archived As Nullable(Of Boolean), dateCreatedFrom As String, dateCreatedTo As String, sortExpression As String, sortOrder As Nullable(Of Integer)) As ObjectResult(Of Product_GetList_Result)
        Dim pageIndexParameter As ObjectParameter = If(pageIndex.HasValue, New ObjectParameter("PageIndex", pageIndex), New ObjectParameter("PageIndex", GetType(Integer)))

        Dim pageSizeParameter As ObjectParameter = If(pageSize.HasValue, New ObjectParameter("PageSize", pageSize), New ObjectParameter("PageSize", GetType(Integer)))

        Dim productIDParameter As ObjectParameter = If(productID.HasValue, New ObjectParameter("ProductID", productID), New ObjectParameter("ProductID", GetType(Integer)))

        Dim productNameParameter As ObjectParameter = If(productName IsNot Nothing, New ObjectParameter("ProductName", productName), New ObjectParameter("ProductName", GetType(String)))

        Dim descriptionParameter As ObjectParameter = If(description IsNot Nothing, New ObjectParameter("Description", description), New ObjectParameter("Description", GetType(String)))

        Dim categoryIDParameter As ObjectParameter = If(categoryID.HasValue, New ObjectParameter("CategoryID", categoryID), New ObjectParameter("CategoryID", GetType(Integer)))

        Dim subCategoryIDParameter As ObjectParameter = If(subCategoryID.HasValue, New ObjectParameter("SubCategoryID", subCategoryID), New ObjectParameter("SubCategoryID", GetType(Integer)))

        Dim costParameter As ObjectParameter = If(cost.HasValue, New ObjectParameter("Cost", cost), New ObjectParameter("Cost", GetType(Double)))

        Dim priceParameter As ObjectParameter = If(price.HasValue, New ObjectParameter("Price", price), New ObjectParameter("Price", GetType(Double)))

        Dim archivedParameter As ObjectParameter = If(archived.HasValue, New ObjectParameter("Archived", archived), New ObjectParameter("Archived", GetType(Boolean)))

        Dim dateCreatedFromParameter As ObjectParameter = If(dateCreatedFrom IsNot Nothing, New ObjectParameter("DateCreatedFrom", dateCreatedFrom), New ObjectParameter("DateCreatedFrom", GetType(String)))

        Dim dateCreatedToParameter As ObjectParameter = If(dateCreatedTo IsNot Nothing, New ObjectParameter("DateCreatedTo", dateCreatedTo), New ObjectParameter("DateCreatedTo", GetType(String)))

        Dim sortExpressionParameter As ObjectParameter = If(sortExpression IsNot Nothing, New ObjectParameter("SortExpression", sortExpression), New ObjectParameter("SortExpression", GetType(String)))

        Dim sortOrderParameter As ObjectParameter = If(sortOrder.HasValue, New ObjectParameter("SortOrder", sortOrder), New ObjectParameter("SortOrder", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Product_GetList_Result)("Product_GetList", pageIndexParameter, pageSizeParameter, productIDParameter, productNameParameter, descriptionParameter, categoryIDParameter, subCategoryIDParameter, costParameter, priceParameter, archivedParameter, dateCreatedFromParameter, dateCreatedToParameter, sortExpressionParameter, sortOrderParameter)
    End Function

    Public Overridable Function CustomerAddress_GetList(pageIndex As Nullable(Of Integer), pageSize As Nullable(Of Integer), customerID As Nullable(Of Integer), customerAddressID As Nullable(Of Integer), addressTypeID As Nullable(Of Integer), archived As Nullable(Of Boolean)) As ObjectResult(Of CustomerAddress_GetList_Result)
        Dim pageIndexParameter As ObjectParameter = If(pageIndex.HasValue, New ObjectParameter("PageIndex", pageIndex), New ObjectParameter("PageIndex", GetType(Integer)))

        Dim pageSizeParameter As ObjectParameter = If(pageSize.HasValue, New ObjectParameter("PageSize", pageSize), New ObjectParameter("PageSize", GetType(Integer)))

        Dim customerIDParameter As ObjectParameter = If(customerID.HasValue, New ObjectParameter("CustomerID", customerID), New ObjectParameter("CustomerID", GetType(Integer)))

        Dim customerAddressIDParameter As ObjectParameter = If(customerAddressID.HasValue, New ObjectParameter("CustomerAddressID", customerAddressID), New ObjectParameter("CustomerAddressID", GetType(Integer)))

        Dim addressTypeIDParameter As ObjectParameter = If(addressTypeID.HasValue, New ObjectParameter("AddressTypeID", addressTypeID), New ObjectParameter("AddressTypeID", GetType(Integer)))

        Dim archivedParameter As ObjectParameter = If(archived.HasValue, New ObjectParameter("Archived", archived), New ObjectParameter("Archived", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of CustomerAddress_GetList_Result)("CustomerAddress_GetList", pageIndexParameter, pageSizeParameter, customerIDParameter, customerAddressIDParameter, addressTypeIDParameter, archivedParameter)
    End Function

    Public Overridable Function sp_alterdiagram(diagramname As String, owner_id As Nullable(Of Integer), version As Nullable(Of Integer), definition As Byte()) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Dim versionParameter As ObjectParameter = If(version.HasValue, New ObjectParameter("version", version), New ObjectParameter("version", GetType(Integer)))

        Dim definitionParameter As ObjectParameter = If(definition IsNot Nothing, New ObjectParameter("definition", definition), New ObjectParameter("definition", GetType(Byte())))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter)
    End Function

    Public Overridable Function sp_creatediagram(diagramname As String, owner_id As Nullable(Of Integer), version As Nullable(Of Integer), definition As Byte()) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Dim versionParameter As ObjectParameter = If(version.HasValue, New ObjectParameter("version", version), New ObjectParameter("version", GetType(Integer)))

        Dim definitionParameter As ObjectParameter = If(definition IsNot Nothing, New ObjectParameter("definition", definition), New ObjectParameter("definition", GetType(Byte())))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter)
    End Function

    Public Overridable Function sp_dropdiagram(diagramname As String, owner_id As Nullable(Of Integer)) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter)
    End Function

    Public Overridable Function sp_helpdiagramdefinition(diagramname As String, owner_id As Nullable(Of Integer)) As ObjectResult(Of sp_helpdiagramdefinition_Result)
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of sp_helpdiagramdefinition_Result)("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter)
    End Function

    Public Overridable Function sp_helpdiagrams(diagramname As String, owner_id As Nullable(Of Integer)) As ObjectResult(Of sp_helpdiagrams_Result)
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of sp_helpdiagrams_Result)("sp_helpdiagrams", diagramnameParameter, owner_idParameter)
    End Function

    Public Overridable Function sp_renamediagram(diagramname As String, owner_id As Nullable(Of Integer), new_diagramname As String) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Dim new_diagramnameParameter As ObjectParameter = If(new_diagramname IsNot Nothing, New ObjectParameter("new_diagramname", new_diagramname), New ObjectParameter("new_diagramname", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter)
    End Function

    Public Overridable Function sp_upgraddiagrams() As Integer
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_upgraddiagrams")
    End Function

    <DbFunction("ModelEntities", "XMLIdentifiers")>
    Public Overridable Function XMLIdentifiers(xml As String) As IQueryable(Of Nullable(Of Integer))
        Dim xmlParameter As ObjectParameter = If(xml IsNot Nothing, New ObjectParameter("xml", xml), New ObjectParameter("xml", GetType(String)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of Nullable(Of Integer))("[ModelEntities].[XMLIdentifiers](@xml)", xmlParameter)
    End Function

    <DbFunction("ModelEntities", "XMLKeyPairs")>
    Public Overridable Function XMLKeyPairs(xml As String) As IQueryable(Of XMLKeyPairs_Result)
        Dim xmlParameter As ObjectParameter = If(xml IsNot Nothing, New ObjectParameter("xml", xml), New ObjectParameter("xml", GetType(String)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of XMLKeyPairs_Result)("[ModelEntities].[XMLKeyPairs](@xml)", xmlParameter)
    End Function

    Public Overridable Function ProductImage_GetList(pageIndex As Nullable(Of Integer), pageSize As Nullable(Of Integer), pictureID As Nullable(Of Integer), productID As Nullable(Of Integer), archived As Nullable(Of Boolean), isPrimary As Nullable(Of Boolean)) As ObjectResult(Of ProductImage_GetList_Result)
        Dim pageIndexParameter As ObjectParameter = If(pageIndex.HasValue, New ObjectParameter("PageIndex", pageIndex), New ObjectParameter("PageIndex", GetType(Integer)))

        Dim pageSizeParameter As ObjectParameter = If(pageSize.HasValue, New ObjectParameter("PageSize", pageSize), New ObjectParameter("PageSize", GetType(Integer)))

        Dim pictureIDParameter As ObjectParameter = If(pictureID.HasValue, New ObjectParameter("PictureID", pictureID), New ObjectParameter("PictureID", GetType(Integer)))

        Dim productIDParameter As ObjectParameter = If(productID.HasValue, New ObjectParameter("ProductID", productID), New ObjectParameter("ProductID", GetType(Integer)))

        Dim archivedParameter As ObjectParameter = If(archived.HasValue, New ObjectParameter("Archived", archived), New ObjectParameter("Archived", GetType(Boolean)))

        Dim isPrimaryParameter As ObjectParameter = If(isPrimary.HasValue, New ObjectParameter("IsPrimary", isPrimary), New ObjectParameter("IsPrimary", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of ProductImage_GetList_Result)("ProductImage_GetList", pageIndexParameter, pageSizeParameter, pictureIDParameter, productIDParameter, archivedParameter, isPrimaryParameter)
    End Function

    Public Overridable Function Customer_ToggleArchive(addressID As Nullable(Of Integer)) As Integer
        Dim addressIDParameter As ObjectParameter = If(addressID.HasValue, New ObjectParameter("AddressID", addressID), New ObjectParameter("AddressID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("Customer_ToggleArchive", addressIDParameter)
    End Function

    Public Overridable Function CustomerAddress_ToggleArchive(addressID As Nullable(Of Integer)) As Integer
        Dim addressIDParameter As ObjectParameter = If(addressID.HasValue, New ObjectParameter("AddressID", addressID), New ObjectParameter("AddressID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("CustomerAddress_ToggleArchive", addressIDParameter)
    End Function

    Public Overridable Function Orders_GetList(pageIndex As Nullable(Of Integer), pageSize As Nullable(Of Integer), orderID As Nullable(Of Integer), customerID As Nullable(Of Integer), customerName As String, paymentTypeID As Nullable(Of Integer), dateFrom As String, dateTo As String, archived As Nullable(Of Boolean)) As ObjectResult(Of Orders_GetList_Result)
        Dim pageIndexParameter As ObjectParameter = If(pageIndex.HasValue, New ObjectParameter("PageIndex", pageIndex), New ObjectParameter("PageIndex", GetType(Integer)))

        Dim pageSizeParameter As ObjectParameter = If(pageSize.HasValue, New ObjectParameter("PageSize", pageSize), New ObjectParameter("PageSize", GetType(Integer)))

        Dim orderIDParameter As ObjectParameter = If(orderID.HasValue, New ObjectParameter("OrderID", orderID), New ObjectParameter("OrderID", GetType(Integer)))

        Dim customerIDParameter As ObjectParameter = If(customerID.HasValue, New ObjectParameter("CustomerID", customerID), New ObjectParameter("CustomerID", GetType(Integer)))

        Dim customerNameParameter As ObjectParameter = If(customerName IsNot Nothing, New ObjectParameter("CustomerName", customerName), New ObjectParameter("CustomerName", GetType(String)))

        Dim paymentTypeIDParameter As ObjectParameter = If(paymentTypeID.HasValue, New ObjectParameter("PaymentTypeID", paymentTypeID), New ObjectParameter("PaymentTypeID", GetType(Integer)))

        Dim dateFromParameter As ObjectParameter = If(dateFrom IsNot Nothing, New ObjectParameter("DateFrom", dateFrom), New ObjectParameter("DateFrom", GetType(String)))

        Dim dateToParameter As ObjectParameter = If(dateTo IsNot Nothing, New ObjectParameter("DateTo", dateTo), New ObjectParameter("DateTo", GetType(String)))

        Dim archivedParameter As ObjectParameter = If(archived.HasValue, New ObjectParameter("Archived", archived), New ObjectParameter("Archived", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Orders_GetList_Result)("Orders_GetList", pageIndexParameter, pageSizeParameter, orderIDParameter, customerIDParameter, customerNameParameter, paymentTypeIDParameter, dateFromParameter, dateToParameter, archivedParameter)
    End Function

    Public Overridable Function OrderDetails_GetList(pageIndex As Nullable(Of Integer), pageSize As Nullable(Of Integer), orderID As Nullable(Of Integer), customerID As Nullable(Of Integer), orderDetailID As Nullable(Of Integer), productID As Nullable(Of Integer), archived As Nullable(Of Boolean)) As ObjectResult(Of OrderDetails_GetList_Result)
        Dim pageIndexParameter As ObjectParameter = If(pageIndex.HasValue, New ObjectParameter("PageIndex", pageIndex), New ObjectParameter("PageIndex", GetType(Integer)))

        Dim pageSizeParameter As ObjectParameter = If(pageSize.HasValue, New ObjectParameter("PageSize", pageSize), New ObjectParameter("PageSize", GetType(Integer)))

        Dim orderIDParameter As ObjectParameter = If(orderID.HasValue, New ObjectParameter("OrderID", orderID), New ObjectParameter("OrderID", GetType(Integer)))

        Dim customerIDParameter As ObjectParameter = If(customerID.HasValue, New ObjectParameter("CustomerID", customerID), New ObjectParameter("CustomerID", GetType(Integer)))

        Dim orderDetailIDParameter As ObjectParameter = If(orderDetailID.HasValue, New ObjectParameter("OrderDetailID", orderDetailID), New ObjectParameter("OrderDetailID", GetType(Integer)))

        Dim productIDParameter As ObjectParameter = If(productID.HasValue, New ObjectParameter("ProductID", productID), New ObjectParameter("ProductID", GetType(Integer)))

        Dim archivedParameter As ObjectParameter = If(archived.HasValue, New ObjectParameter("Archived", archived), New ObjectParameter("Archived", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of OrderDetails_GetList_Result)("OrderDetails_GetList", pageIndexParameter, pageSizeParameter, orderIDParameter, customerIDParameter, orderDetailIDParameter, productIDParameter, archivedParameter)
    End Function

    Public Overridable Function Calculate_OrderTotal(orderId As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Double))
        Dim orderIdParameter As ObjectParameter = If(orderId.HasValue, New ObjectParameter("OrderId", orderId), New ObjectParameter("OrderId", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Double))("Calculate_OrderTotal", orderIdParameter)
    End Function

    Public Overridable Function OrdersStatus_GetList(pageIndex As Nullable(Of Integer), pageSize As Nullable(Of Integer), orderID As Nullable(Of Integer), customerID As Nullable(Of Integer), customerName As String, orderStatusID As Nullable(Of Integer), orderStatusName As String, dateFrom As String, dateTo As String, archived As Nullable(Of Boolean)) As ObjectResult(Of OrdersStatus_GetList_Result)
        Dim pageIndexParameter As ObjectParameter = If(pageIndex.HasValue, New ObjectParameter("PageIndex", pageIndex), New ObjectParameter("PageIndex", GetType(Integer)))

        Dim pageSizeParameter As ObjectParameter = If(pageSize.HasValue, New ObjectParameter("PageSize", pageSize), New ObjectParameter("PageSize", GetType(Integer)))

        Dim orderIDParameter As ObjectParameter = If(orderID.HasValue, New ObjectParameter("OrderID", orderID), New ObjectParameter("OrderID", GetType(Integer)))

        Dim customerIDParameter As ObjectParameter = If(customerID.HasValue, New ObjectParameter("CustomerID", customerID), New ObjectParameter("CustomerID", GetType(Integer)))

        Dim customerNameParameter As ObjectParameter = If(customerName IsNot Nothing, New ObjectParameter("CustomerName", customerName), New ObjectParameter("CustomerName", GetType(String)))

        Dim orderStatusIDParameter As ObjectParameter = If(orderStatusID.HasValue, New ObjectParameter("OrderStatusID", orderStatusID), New ObjectParameter("OrderStatusID", GetType(Integer)))

        Dim orderStatusNameParameter As ObjectParameter = If(orderStatusName IsNot Nothing, New ObjectParameter("OrderStatusName", orderStatusName), New ObjectParameter("OrderStatusName", GetType(String)))

        Dim dateFromParameter As ObjectParameter = If(dateFrom IsNot Nothing, New ObjectParameter("DateFrom", dateFrom), New ObjectParameter("DateFrom", GetType(String)))

        Dim dateToParameter As ObjectParameter = If(dateTo IsNot Nothing, New ObjectParameter("DateTo", dateTo), New ObjectParameter("DateTo", GetType(String)))

        Dim archivedParameter As ObjectParameter = If(archived.HasValue, New ObjectParameter("Archived", archived), New ObjectParameter("Archived", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of OrdersStatus_GetList_Result)("OrdersStatus_GetList", pageIndexParameter, pageSizeParameter, orderIDParameter, customerIDParameter, customerNameParameter, orderStatusIDParameter, orderStatusNameParameter, dateFromParameter, dateToParameter, archivedParameter)
    End Function

    Public Overridable Function OrdersShipment_GetList(pageIndex As Nullable(Of Integer), pageSize As Nullable(Of Integer), orderID As Nullable(Of Integer), customerID As Nullable(Of Integer), customerName As String, dateFrom As String, dateTo As String, archived As Nullable(Of Boolean)) As ObjectResult(Of OrdersShipment_GetList_Result)
        Dim pageIndexParameter As ObjectParameter = If(pageIndex.HasValue, New ObjectParameter("PageIndex", pageIndex), New ObjectParameter("PageIndex", GetType(Integer)))

        Dim pageSizeParameter As ObjectParameter = If(pageSize.HasValue, New ObjectParameter("PageSize", pageSize), New ObjectParameter("PageSize", GetType(Integer)))

        Dim orderIDParameter As ObjectParameter = If(orderID.HasValue, New ObjectParameter("OrderID", orderID), New ObjectParameter("OrderID", GetType(Integer)))

        Dim customerIDParameter As ObjectParameter = If(customerID.HasValue, New ObjectParameter("CustomerID", customerID), New ObjectParameter("CustomerID", GetType(Integer)))

        Dim customerNameParameter As ObjectParameter = If(customerName IsNot Nothing, New ObjectParameter("CustomerName", customerName), New ObjectParameter("CustomerName", GetType(String)))

        Dim dateFromParameter As ObjectParameter = If(dateFrom IsNot Nothing, New ObjectParameter("DateFrom", dateFrom), New ObjectParameter("DateFrom", GetType(String)))

        Dim dateToParameter As ObjectParameter = If(dateTo IsNot Nothing, New ObjectParameter("DateTo", dateTo), New ObjectParameter("DateTo", GetType(String)))

        Dim archivedParameter As ObjectParameter = If(archived.HasValue, New ObjectParameter("Archived", archived), New ObjectParameter("Archived", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of OrdersShipment_GetList_Result)("OrdersShipment_GetList", pageIndexParameter, pageSizeParameter, orderIDParameter, customerIDParameter, customerNameParameter, dateFromParameter, dateToParameter, archivedParameter)
    End Function

    Public Overridable Function CategoryMenu_GetTreeList(archived As Nullable(Of Boolean)) As ObjectResult(Of CategoryMenu_GetTreeList_Result)
        Dim archivedParameter As ObjectParameter = If(archived.HasValue, New ObjectParameter("Archived", archived), New ObjectParameter("Archived", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of CategoryMenu_GetTreeList_Result)("CategoryMenu_GetTreeList", archivedParameter)
    End Function

    Public Overridable Function FeaturedProductsImage_GetList(pageIndex As Nullable(Of Integer), pageSize As Nullable(Of Integer), pictureID As Nullable(Of Integer), productID As Nullable(Of Integer), archived As Nullable(Of Boolean), picIsPrimary As Nullable(Of Boolean), proIsPrimary As Nullable(Of Boolean), isFeatured As Nullable(Of Boolean)) As ObjectResult(Of FeaturedProductsImage_GetList_Result)
        Dim pageIndexParameter As ObjectParameter = If(pageIndex.HasValue, New ObjectParameter("PageIndex", pageIndex), New ObjectParameter("PageIndex", GetType(Integer)))

        Dim pageSizeParameter As ObjectParameter = If(pageSize.HasValue, New ObjectParameter("PageSize", pageSize), New ObjectParameter("PageSize", GetType(Integer)))

        Dim pictureIDParameter As ObjectParameter = If(pictureID.HasValue, New ObjectParameter("PictureID", pictureID), New ObjectParameter("PictureID", GetType(Integer)))

        Dim productIDParameter As ObjectParameter = If(productID.HasValue, New ObjectParameter("ProductID", productID), New ObjectParameter("ProductID", GetType(Integer)))

        Dim archivedParameter As ObjectParameter = If(archived.HasValue, New ObjectParameter("Archived", archived), New ObjectParameter("Archived", GetType(Boolean)))

        Dim picIsPrimaryParameter As ObjectParameter = If(picIsPrimary.HasValue, New ObjectParameter("PicIsPrimary", picIsPrimary), New ObjectParameter("PicIsPrimary", GetType(Boolean)))

        Dim proIsPrimaryParameter As ObjectParameter = If(proIsPrimary.HasValue, New ObjectParameter("ProIsPrimary", proIsPrimary), New ObjectParameter("ProIsPrimary", GetType(Boolean)))

        Dim isFeaturedParameter As ObjectParameter = If(isFeatured.HasValue, New ObjectParameter("IsFeatured", isFeatured), New ObjectParameter("IsFeatured", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of FeaturedProductsImage_GetList_Result)("FeaturedProductsImage_GetList", pageIndexParameter, pageSizeParameter, pictureIDParameter, productIDParameter, archivedParameter, picIsPrimaryParameter, proIsPrimaryParameter, isFeaturedParameter)
    End Function

    Public Overridable Function ShoppingCart_GetList(pageIndex As Nullable(Of Integer), pageSize As Nullable(Of Integer), cartID As Nullable(Of Integer), sessionID As String, productID As Nullable(Of Integer), archived As Nullable(Of Boolean)) As ObjectResult(Of ShoppingCart_GetList_Result)
        Dim pageIndexParameter As ObjectParameter = If(pageIndex.HasValue, New ObjectParameter("PageIndex", pageIndex), New ObjectParameter("PageIndex", GetType(Integer)))

        Dim pageSizeParameter As ObjectParameter = If(pageSize.HasValue, New ObjectParameter("PageSize", pageSize), New ObjectParameter("PageSize", GetType(Integer)))

        Dim cartIDParameter As ObjectParameter = If(cartID.HasValue, New ObjectParameter("CartID", cartID), New ObjectParameter("CartID", GetType(Integer)))

        Dim sessionIDParameter As ObjectParameter = If(sessionID IsNot Nothing, New ObjectParameter("SessionID", sessionID), New ObjectParameter("SessionID", GetType(String)))

        Dim productIDParameter As ObjectParameter = If(productID.HasValue, New ObjectParameter("ProductID", productID), New ObjectParameter("ProductID", GetType(Integer)))

        Dim archivedParameter As ObjectParameter = If(archived.HasValue, New ObjectParameter("Archived", archived), New ObjectParameter("Archived", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of ShoppingCart_GetList_Result)("ShoppingCart_GetList", pageIndexParameter, pageSizeParameter, cartIDParameter, sessionIDParameter, productIDParameter, archivedParameter)
    End Function

End Class
